<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>羊の博客</title>
  
  
  <link href="http://ruixify.top/atom.xml" rel="self"/>
  
  <link href="http://ruixify.top/"/>
  <updated>2022-04-05T04:12:42.444Z</updated>
  <id>http://ruixify.top/</id>
  
  <author>
    <name>甤豨</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>(LeetCode307)区域和检索 - 数组可修改</title>
    <link href="http://ruixify.top/2022/04/04/307/"/>
    <id>http://ruixify.top/2022/04/04/307/</id>
    <published>2022-04-04T14:22:32.000Z</published>
    <updated>2022-04-05T04:12:42.444Z</updated>
    
    <content type="html"><![CDATA[<p>   又是元气满满的一天！（颓废😶）<br>   题目链接：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/">https://leetcode-cn.com/problems/range-sum-query-mutable/</a><br><span id="more"></span></p><h2 id="首先看题目"><a href="#首先看题目" class="headerlink" title="首先看题目"></a>首先看题目</h2>   <div class="note info"><p>   给你一个数组 <strong>nums</strong> ，请你完成两类查询。</p><ol><li>其中一类查询要求 更新 数组 <strong>nums</strong> 下标对应的值。</li><li><p>另一类查询要求返回数组<strong> nums</strong> 中索引<strong> left</strong> 和索引 <strong>right</strong> 之间<strong>（ 包含 ）</strong>的<strong>nums</strong>元素的 和 ，其中 <strong>left &lt;= right</strong>。</p><p>实现 NumArray 类：</p></li></ol><ul><li><strong>NumArray(int[] nums)</strong> 用整数数组 <strong>nums</strong> 初始化对象</li><li><strong>void update(int index, int val)</strong> 将 <strong>nums[index]</strong> 的值 更新 为 <strong>val</strong></li><li><strong>int sumRange(int left, int right)</strong> 返回数组 <strong>nums</strong> 中索引 <strong>left</strong> 和索引 <strong>right</strong> 之间<strong>（ 包含 ）</strong>的<strong>nums</strong>元素的 和 （即，<strong>nums[left] + nums[left + 1], …, nums[right]</strong>）。</li></ul><p>示例：</p><pre><code>&gt;输入：&gt; [&quot;NumArray&quot;, &quot;sumRange&quot;, &quot;update&quot;, &quot;sumRange&quot;]&gt; [[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]&gt; 输出：&gt; [null, 9, null, 8]</code></pre></div><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><ol><li><h3 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h3> 线段树我也是第一次接触，也是通过这道题学习了线段树的使用环境，具体的实现和JAVA的代码（详情可以见B站 <strong>BV1cb411t7AM</strong>，灯神讲的还是十分的通俗易懂的）。就我自己的理解，线段树实际上就是“线段”和“树”。“线段”就是数组的从一索引处到另一个索引处，就像线段的两个端点。“树”就是众所周知的树的数据结构。而线段树就是利用树的数据结构将数组的线段特征表示出来，从树的叶子节点到根节点，节点的值是线段内元素的和，线段的长度不断增长，直到长度为整个数组的长度。<h4 id="线段树思路"><a href="#线段树思路" class="headerlink" title="线段树思路"></a>线段树思路</h4><ol><li><h5 id="建树"><a href="#建树" class="headerlink" title="建树"></a>建树</h5> 需要注意的是这里的树是通过数组的方式存储的。<br> 这里的初始数组我们设为<strong>int[] arr</strong>，为了解释清楚，我们初始数据少一点<strong>{1，3，5，7，9}</strong>，长度<strong>lenght</strong>是 5 。需要建立的树数组为<strong>int[] tree</strong>。<br> 开始建树，树的根节点是<strong>0~4</strong>线段内元素的和，也就是 25 。<br><img src="/2022/04/04/307/1_1.png" alt><br>然后将线段<strong>0~4</strong>截断，方法是通过中间值<strong>mid</strong>类似于二分，<strong>mid=start+(end-start)/2</strong>（start是线段的左索引，end是线段的右索引）。然后计算线段范围内个元素的总和，<strong>0~2</strong>内是<strong>9</strong>，<strong>3~4</strong>范围内是16。<br><img src="/2022/04/04/307/1_2.png" alt><br>就这样一直下去。<br> <img src="/2022/04/04/307/1_3.png" alt><br> 接下来就是<strong>tree</strong>数组了，为了将树结构保存在数组中，我们需要将上述的树结构虚拟一些节点，使之成为完全二叉树。<br> <img src="/2022/04/04/307/1_4.png" alt><br> <img src="/2022/04/04/307/1_tree.png" alt><br> 代码实现呢，需要反着来，过程就像<strong>后序遍历</strong>，从数组的全长<strong>0~4</strong>开始（即从根节点开始），判断线段中是否仅存在一个元素了（即是否是叶子节点，判断条件为<strong>start==end</strong>就是说左右端点在同一个地方，不就是一个点了嘛就是一个元素了），判断为否，则截断，依次递归左区间和右区间（即递归左右子树），递归返回到父节点时，父节点的值为左右子树值的和。若判断为是，return。<h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init_tree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span>[] tree,<span class="type">int</span> node,<span class="type">int</span> start,<span class="type">int</span> end)</span> </span><br><span class="line">&#123;<span class="comment">//初始化线段树</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(start==end) &#123;</span><br><span class="line">   tree[node]=nums[end];</span><br><span class="line">   <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;<span class="comment">//找到 中间值对树进行分割，递归调用</span></span><br><span class="line">   <span class="type">int</span> left_node=<span class="number">2</span>*node+<span class="number">1</span>;<span class="comment">//tree中node的左子树索引</span></span><br><span class="line">   <span class="type">int</span> right_node=<span class="number">2</span>*node+<span class="number">2</span>;<span class="comment">//tree中node的右子树索引</span></span><br><span class="line">    </span><br><span class="line">   <span class="comment">//利用类似于后序遍历的方式进行节点的赋值</span></span><br><span class="line">   init_tree(nums, tree, left_node, start, mid);<span class="comment">//对左子树进行遍历</span></span><br><span class="line">   init_tree(nums, tree, right_node, mid+<span class="number">1</span>, end);<span class="comment">//对右子树进行遍历</span></span><br><span class="line">   tree[node]=tree[left_node]+tree[right_node];<span class="comment">//对左右子树的父节点赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><h5 id="更新给定索引处的值"><a href="#更新给定索引处的值" class="headerlink" title="更新给定索引处的值"></a>更新给定索引处的值</h5><p>对于数组<strong>nums</strong>来说可以直接<strong>nums[ index ]=val</strong>即可，但在更新之后数组<strong>tree</strong>也需要进行更新，这样才能保持同步。<br>而<strong>tree</strong>的更新方式类似于二分查找的步骤。更新索引<strong>index</strong>和<strong>mid</strong>进行比较，若<strong>index&gt;=start&amp;&amp;index&lt;=mid</strong>，则<strong>end=mid</strong>去左区间找；若<strong>index&gt;mid&amp;&amp;index&lt;=end</strong>，则<strong>start=mid+1</strong>去右区间找，直到<strong>start==end</strong>说明找到了，更新tree在该索引的值，返回，更新各个父节点的值。<br><img src="/2022/04/04/307/2.png" alt></p><h6 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update_tree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span>[] tree,<span class="type">int</span> node,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> start,<span class="type">int</span> end,<span class="type">int</span> index,<span class="type">int</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(start==end) &#123;<span class="comment">//当此区间内只有一个值值的时候</span></span><br><span class="line">    tree[node]=val;<span class="comment">//更新</span></span><br><span class="line">    nums[start]=val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;<span class="comment">//利用中间值判断index的位置从而进行左右分支</span></span><br><span class="line">    <span class="type">int</span> left_node=<span class="number">2</span>*node+<span class="number">1</span>;<span class="comment">//左子树的索引</span></span><br><span class="line">    <span class="type">int</span> right_node=<span class="number">2</span>*node+<span class="number">2</span>;<span class="comment">//右子树的索引</span></span><br><span class="line">    <span class="keyword">if</span>(index&gt;mid&amp;&amp;index&lt;=end) &#123;<span class="comment">//如果index在左区间内</span></span><br><span class="line">    update_tree(nums, tree, right_node, mid+<span class="number">1</span>, end, index, val);</span><br><span class="line">    <span class="comment">//对左子树进行更新</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//index在有区间内</span></span><br><span class="line">    update_tree(nums, tree, left_node, start, mid, index, val);</span><br><span class="line">    <span class="comment">//对右子树进行更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tree[node]=tree[left_node]+tree[right_node];<span class="comment">//对父节点重新赋值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="求特定区间内元素的和"><a href="#求特定区间内元素的和" class="headerlink" title="求特定区间内元素的和"></a>求特定区间内元素的和</h5><p>特定区间设为（L,R），因为<strong>数组tree</strong>已经记录了某些区间的元素的总和，那么只要把特定区间拆分为tree数组有的区间有的即可，换句话说，<strong>tree节点的表示区间是（L,R）的子集的时候，就可以直接返回该tree节点的值</strong>，如此可以降低时间复杂度。但是如果（L,R）与节点表示区间交集是空集，那么要直接返回0；如果tree已经到了叶子节点，也直接返回。<br><img src="/2022/04/04/307/3.png" alt><br>所以再计算所有返回的值，即 $ 0+4+5+16=25 $</p><h6 id="代码：-2"><a href="#代码：-2" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum_tree</span><span class="params">(<span class="type">int</span>[] tree,<span class="type">int</span> node,<span class="type">int</span> start,<span class="type">int</span> end,<span class="type">int</span> L,<span class="type">int</span> R)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(start&gt;=L&amp;&amp;end&lt;=R) &#123;</span><br><span class="line">    <span class="comment">//要求和的区间是待定区间的子集可以直接返回当前的tree[node]</span></span><br><span class="line">    <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(end&lt;L||start&gt;R) &#123;<span class="comment">//如果待定区间内不包含求和区间就直接返回0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> left_node=<span class="number">2</span>*node+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right_node=<span class="number">2</span>*node+<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> left_sum=sum_tree(nums, tree, left_node, start, mid, L, R);</span><br><span class="line">    <span class="type">int</span> right_sum=sum_tree(nums, tree, right_node, mid+<span class="number">1</span>, end, L, R);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> left_sum+right_sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><h5 id="线段树总结"><a href="#线段树总结" class="headerlink" title="线段树总结"></a>线段树总结</h5><p>线段树要理解通透还是需要不断地去画图和理解地，尤其是递归过程是如何跳转地也是比较头疼的事情，多看几遍，多写几遍，多理解。<br>最后，线段树地题解代码：</p><h6 id="代码：-3"><a href="#代码：-3" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> nums[]=<span class="literal">null</span>;</span><br><span class="line"><span class="type">int</span> tree[]=<span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(nums==<span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//nums有可能是空要注意！</span></span><br><span class="line">    <span class="built_in">this</span>.nums=nums;</span><br><span class="line">    tree=<span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">4</span>*nums.length];</span><br><span class="line">    init_tree(<span class="built_in">this</span>.nums, tree, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.nums.length-<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//初始化tree</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">    update_tree(<span class="built_in">this</span>.nums, <span class="built_in">this</span>.tree, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.nums.length-<span class="number">1</span>, index, val);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> sum_tree(<span class="built_in">this</span>.nums, <span class="built_in">this</span>.tree, <span class="number">0</span>, <span class="number">0</span>, <span class="built_in">this</span>.nums.length-<span class="number">1</span>, left, right);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init_tree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span>[] tree,<span class="type">int</span> node,<span class="type">int</span> start,<span class="type">int</span> end)</span> </span><br><span class="line">    &#123;<span class="comment">//初始化线段树</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(start==end) &#123;</span><br><span class="line">    tree[node]=nums[end];</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;<span class="comment">//找到 中间值对树进行分割，递归调用</span></span><br><span class="line">    <span class="type">int</span> left_node=<span class="number">2</span>*node+<span class="number">1</span>;<span class="comment">//tree中node的左子树索引</span></span><br><span class="line">    <span class="type">int</span> right_node=<span class="number">2</span>*node+<span class="number">2</span>;<span class="comment">//tree中node的右子树索引</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//利用类似于后序遍历的方式进行节点的赋值</span></span><br><span class="line">    init_tree(nums, tree, left_node, start, mid);<span class="comment">//对左子树进行遍历</span></span><br><span class="line">    init_tree(nums, tree, right_node, mid+<span class="number">1</span>, end);<span class="comment">//对右子树进行遍历</span></span><br><span class="line">    tree[node]=tree[left_node]+tree[right_node];<span class="comment">//对左右子树的父节点赋值</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update_tree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span>[] tree,<span class="type">int</span> node,<span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                            <span class="type">int</span> end,<span class="type">int</span> index,<span class="type">int</span> val)</span> &#123;<span class="comment">//更行tree数组</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(start==end) &#123;<span class="comment">//当此区间内只有一个值值的时候</span></span><br><span class="line">    tree[node]=val;<span class="comment">//更新</span></span><br><span class="line">    nums[start]=val;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;<span class="comment">//利用中间值判断index的位置从而进行左右分支</span></span><br><span class="line">    <span class="type">int</span> left_node=<span class="number">2</span>*node+<span class="number">1</span>;<span class="comment">//左子树的索引</span></span><br><span class="line">    <span class="type">int</span> right_node=<span class="number">2</span>*node+<span class="number">2</span>;<span class="comment">//右子树的索引</span></span><br><span class="line">    <span class="keyword">if</span>(index&gt;mid&amp;&amp;index&lt;=end) &#123;<span class="comment">//如果index在左区间内</span></span><br><span class="line">    update_tree(nums, tree, right_node, mid+<span class="number">1</span>, end, index, val);</span><br><span class="line">    <span class="comment">//对左子树进行更新</span></span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;<span class="comment">//index在有区间内</span></span><br><span class="line">    update_tree(nums, tree, left_node, start, mid, index, val);</span><br><span class="line">    <span class="comment">//对右子树进行更新</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    tree[node]=tree[left_node]+tree[right_node];<span class="comment">//对父节点重新赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum_tree</span><span class="params">(<span class="type">int</span>[] nums,<span class="type">int</span>[] tree,<span class="type">int</span> node,<span class="type">int</span> start,</span></span><br><span class="line"><span class="params">                        <span class="type">int</span> end,<span class="type">int</span> L,<span class="type">int</span> R)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(start&gt;=L&amp;&amp;end&lt;=R) &#123;</span><br><span class="line">    <span class="comment">//要求和的区间是待定区间的子集可以直接返回当前的tree[node]</span></span><br><span class="line">    <span class="keyword">return</span> tree[node];</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(end&lt;L||start&gt;R) &#123;<span class="comment">//如果待定区间内不包含求和区间就直接返回0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> mid=start+(end-start)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> left_node=<span class="number">2</span>*node+<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> right_node=<span class="number">2</span>*node+<span class="number">2</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> left_sum=sum_tree(nums, tree, left_node, start, mid, L, R);</span><br><span class="line">    <span class="type">int</span> right_sum=sum_tree(nums, tree, right_node, mid+<span class="number">1</span>, end, L, R);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> left_sum+right_sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h6><p>时间复杂度：</p></li></ol><ul><li>构造函数：$O(n)$，其中 n 是数组 nums 的大小。二叉树的高度不超过 $\lceil \log n \rceil + 1⌈logn⌉+1$，那么 tree 的大小不超过$ 2 ^ {\lceil \log n \rceil + 1} - 1 \le 4n$，所以 build 的时间复杂度为$ O(n)$。</li><li>update_tree 函数：$O(log n)$。因为树的高度不超过 $\lceil \log n \rceil + 1$，所以涉及更新的结点数不超过$ \lceil \log n \rceil + 1$</li><li>sum_tree 函数：$O(logn)$。每层结点最多访问四个，总共访问的结点数不超过$ 4 \times (\lceil \log n \rceil + 1)$。<br> 空间复杂度：<br> $O(n)$。保存 tree 需要 $O(n)$ 的空间。</li></ul><h6 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h6><p><img src="/2022/04/04/307/线段树.png" alt></p><ol><li><h3 id="分块处理"><a href="#分块处理" class="headerlink" title="分块处理"></a>分块处理</h3>LeetCode官方还给了一种解法是<strong>分块处理</strong>，原理是将数组分成固定长的几个小块，因为就更新特定索引的值来说，时间复杂度的$O(1)$，而求和时间复杂度是明显的高了，对于大量数据来说，而分块处理的求和函数的数学逻辑较强，不像线段树，多看几遍就能差不多理解的。<br><img src="/2022/04/04/307/分块.png" alt><br>我也给上官方的代码：<h4 id="代码：-4"><a href="#代码：-4" class="headerlink" title="代码："></a>代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">NumArray</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] sum; <span class="comment">// sum[i] 表示第 i 个块的元素和</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> size; <span class="comment">// 块的大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span>[] nums;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NumArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.nums = nums;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        size = (<span class="type">int</span>) Math.sqrt(n);</span><br><span class="line">        sum = <span class="keyword">new</span> <span class="title class_">int</span>[(n + size - <span class="number">1</span>) / size]; <span class="comment">// n/size 向上取整</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            sum[i / size] += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> val)</span> &#123;</span><br><span class="line">        sum[index / size] += val - nums[index];</span><br><span class="line">        nums[index] = val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sumRange</span><span class="params">(<span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b1</span> <span class="operator">=</span> left / size, i1 = left % size, b2 = right / size, i2 = right % size;</span><br><span class="line">        <span class="keyword">if</span> (b1 == b2) &#123; <span class="comment">// 区间 [left, right] 在同一块中</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i1; j &lt;= i2; j++) &#123;</span><br><span class="line">                sum += nums[b1 * size + j];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum1</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i1; j &lt; size; j++) &#123;</span><br><span class="line">            sum1 += nums[b1 * size + j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum2</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt;= i2; j++) &#123;</span><br><span class="line">            sum2 += nums[b2 * size + j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum3</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> b1 + <span class="number">1</span>; j &lt; b2; j++) &#123;</span><br><span class="line">            sum3 += sum[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum1 + sum2 + sum3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>链接：<a href="https://leetcode-cn.com/problems/range-sum-query-mutable/solution/qu-yu-he-jian-suo-shu-zu-ke-xiu-gai-by-l-76xj/">https://leetcode-cn.com/problems/range-sum-query-mutable/solution/qu-yu-he-jian-suo-shu-zu-ke-xiu-gai-by-l-76xj/</a></li><li><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2>中等题，花点时间还是可以解决的，最主要的是通过这题了解了线段树的数据结构，又变强了呢，<strong>Fighting！！</strong>😜。</li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;   又是元气满满的一天！（颓废😶）&lt;br&gt;   题目链接：&lt;a href=&quot;https://leetcode-cn.com/problems/range-sum-query-mutable/&quot;&gt;https://leetcode-cn.com/problems/range-sum-query-mutable/&lt;/a&gt;&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="每日一练" scheme="http://ruixify.top/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
    
    <category term="线段树" scheme="http://ruixify.top/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
    <category term="中等" scheme="http://ruixify.top/tags/%E4%B8%AD%E7%AD%89/"/>
    
  </entry>
  
  <entry>
    <title>(LeetCode744)寻找比目标字母大的最小字母</title>
    <link href="http://ruixify.top/2022/04/04/744/"/>
    <id>http://ruixify.top/2022/04/04/744/</id>
    <published>2022-04-04T00:55:03.000Z</published>
    <updated>2022-04-04T14:29:26.397Z</updated>
    
    <content type="html"><![CDATA[<p>这是我的第一遍博客文章，也是第一次尝试用这种方式来讲编程题，如有什么不好的地方还请多多包涵，之后我也会逐步完善博客网站的功能。<br><span id="more"></span></p><h3 id="首先来康康题目"><a href="#首先来康康题目" class="headerlink" title="首先来康康题目"></a>首先来康康题目</h3>  <div class="note info"><p>给你一个排序后的字符列表 <strong>letters</strong> ，列表中只包含小写英文字母。另给出一个目标字母 <strong>target</strong>，请你寻找在这一有序列表里比目标字母大的最小字母。</p><p>  在比较时，字母是依序循环出现的。举个例子：</p><ul><li>如果目标字母 <strong>‘z’</strong> 并且字符列表为 <strong>letters = [‘a’, ‘b’]</strong> ，则答案返回 <strong>‘a’</strong></li><li>示例：<pre><code>&gt;输入：letters = [&quot;c&quot;, &quot;f&quot;, &quot;j&quot;]，target = &quot;a&quot;&gt;输出: &quot;c&quot;</code></pre></li></ul></div><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol><li><h4 id="暴力解决"><a href="#暴力解决" class="headerlink" title="暴力解决"></a>暴力解决</h4><p> 看完题目之后最先想到也是最容易想到的就是暴力算法解决。</p><h5 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h5><ol><li>首先可以先判断 target 是不是 ‘z’ ，如果是，则可以直接返回 letters[ 0 ] ,因为所有的字                       母中没有比字母 ‘z’ 还要大的字母了，再者考虑到letters数组是有序的，所以答案就是                         letters[ 0 ]。 </li><li>下标 i 从 0 开始,letters[ i ]依次与 target 进行比较，如果 letters[ i ]比 target 要小或者等于就继续循环，只要letters[ i ]比 target 要大，就可以直接return。</li><li>还需要特殊考虑的是类似于字母 ‘z’ 的情况，即 target 已经比完了 letters 中所有的元素依然没有找到比 target 大的，此时还是直接返回 letters[ 0 ]。<h6 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextGreatestLetter</span><span class="params">(<span class="type">char</span>[] letters, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=letters.length;i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(i==letters.length) &#123;</span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(target-letters[i]&gt;=<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> letters[i];</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5>显然，暴力解决的时间复杂度是 $ O(n) $,空间复杂度是 $ O(1) $。这没有什么困难的地方。<h5 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h5><img src="/2022/04/04/744/暴力.png" alt></li></ol></li><li><h4 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h4><p>暴力算法写完之后对于题目有了一个新的理解，首先对于 letters 数组来说，它是有序的，如此有利的条件不用岂不是浪费。那么如何利用呢？没错，二分查找。</p><h5 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h5><ol><li>同样，首先可以先判断 target 与最后一个字母的大小，如果 target 大，那么就可以直接返回 letters[ 0 ]。</li><li>另外的情况就是在数组中了，就可以利用二分法找到这个最小字母，提高时间效率。具体实现呢就是初始时，二分查找的范围是整个列表的下标范围。每次比较当前下标处的字母和目标字母，如果当前下标处的字母大于目标字母，则在当前下标以及当前下标的左侧继续查找，否则在当前下标的右侧继续查找。 <h6 id="代码：-1"><a href="#代码：-1" class="headerlink" title="代码："></a>代码：</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">char</span> <span class="title function_">nextGreatestLetter</span><span class="params">(<span class="type">char</span>[] letters, <span class="type">char</span> target)</span> &#123;</span><br><span class="line">        <span class="type">int</span> len=letters.length-<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> heigh=len,low=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(target&gt;=letters[heigh]) &#123;</span><br><span class="line">        <span class="keyword">return</span> letters[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(low&lt;heigh) &#123;</span><br><span class="line">        mid=low+(heigh-low)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(letters[mid]&gt;target) &#123;</span><br><span class="line">        heigh=mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        low=mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> letters[low];</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h5>对于二分查找来说，时间复杂度一定是和 $ log(n) $有关的。显然，这里的时间复杂度是 $ O(log n) $的，空间复杂度还是$O(1)$，没变。<h5 id="结果：-1"><a href="#结果：-1" class="headerlink" title="结果："></a>结果：</h5><img src="/2022/04/04/744/二分法.png" alt></li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这是第一篇博客，所以在写博客之前，包括在写博客的过程中都花了比较多的时间去了解和学习，同时正好leetcode的今天也是个<strong>“简单”</strong>题，还是比较游刃有余的，😁。而就题目来说，简单的很了，两种方法都很好想，也算是常规题，不过也算是锻炼基本功了。</p></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;这是我的第一遍博客文章，也是第一次尝试用这种方式来讲编程题，如有什么不好的地方还请多多包涵，之后我也会逐步完善博客网站的功能。&lt;br&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="每日一练" scheme="http://ruixify.top/categories/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%BB%83/"/>
    
    
    <category term="二分" scheme="http://ruixify.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="简单" scheme="http://ruixify.top/tags/%E7%AE%80%E5%8D%95/"/>
    
  </entry>
  
</feed>
